name: Deploy to Azure with AZD Up

# Run when manually triggered or on push to main branch
on:
  workflow_dispatch:  # Allows manual triggering
  push:
    branches:
      - main  # Run when commits are pushed to main branch

# Set up permissions for deploying with secretless Azure federated credentials
permissions:
  id-token: write  # Required for Azure login with OIDC
  contents: read   # Required to checkout the code

jobs:
  deploy:
    name: Deploy with AZD Up
    runs-on: ubuntu-latest
    env:
      # Azure authentication
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      
      # Azure deployment settings
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      
      # Project-specific variables (from azure.yaml)
      AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
      AZURE_AIHUB_NAME: ${{ vars.AZURE_AIHUB_NAME }}
      AZURE_AIPROJECT_NAME: ${{ vars.AZURE_AIPROJECT_NAME }}
      AZURE_AISERVICES_NAME: ${{ vars.AZURE_AISERVICES_NAME }}
      AZURE_SEARCH_SERVICE_NAME: ${{ vars.AZURE_SEARCH_SERVICE_NAME }}
      AZURE_APPLICATION_INSIGHTS_NAME: ${{ vars.AZURE_APPLICATION_INSIGHTS_NAME }}
      AZURE_CONTAINER_REGISTRY_NAME: ${{ vars.AZURE_CONTAINER_REGISTRY_NAME }}
      AZURE_KEYVAULT_NAME: ${{ vars.AZURE_KEYVAULT_NAME }}
      AZURE_STORAGE_ACCOUNT_NAME: ${{ vars.AZURE_STORAGE_ACCOUNT_NAME }}
      AZURE_LOG_ANALYTICS_WORKSPACE_NAME: ${{ vars.AZURE_LOG_ANALYTICS_WORKSPACE_NAME }}
      USE_CONTAINER_REGISTRY: ${{ vars.USE_CONTAINER_REGISTRY }}
      USE_APPLICATION_INSIGHTS: ${{ vars.USE_APPLICATION_INSIGHTS }}
      USE_AZURE_AI_SEARCH_SERVICE: ${{ vars.USE_AZURE_AI_SEARCH_SERVICE }}
      AZURE_AI_AGENT_NAME: ${{ vars.AZURE_AI_AGENT_NAME }}
      AZURE_AI_AGENT_ID: ${{ vars.AZURE_AI_AGENT_ID }}
      AZURE_AI_AGENT_DEPLOYMENT_NAME: ${{ vars.AZURE_AI_AGENT_DEPLOYMENT_NAME }}
      AZURE_AI_AGENT_DEPLOYMENT_SKU: ${{ vars.AZURE_AI_AGENT_DEPLOYMENT_SKU }}
      AZURE_AI_AGENT_DEPLOYMENT_CAPACITY: ${{ vars.AZURE_AI_AGENT_DEPLOYMENT_CAPACITY }}
      AZURE_AI_AGENT_MODEL_NAME: ${{ vars.AZURE_AI_AGENT_MODEL_NAME }}
      AZURE_AI_AGENT_MODEL_FORMAT: ${{ vars.AZURE_AI_AGENT_MODEL_FORMAT }}
      AZURE_AI_AGENT_MODEL_VERSION: ${{ vars.AZURE_AI_AGENT_MODEL_VERSION }}
      AZURE_AI_EMBED_DEPLOYMENT_NAME: ${{ vars.AZURE_AI_EMBED_DEPLOYMENT_NAME }}
      AZURE_AI_EMBED_DEPLOYMENT_SKU: ${{ vars.AZURE_AI_EMBED_DEPLOYMENT_SKU }}
      AZURE_AI_EMBED_DEPLOYMENT_CAPACITY: ${{ vars.AZURE_AI_EMBED_DEPLOYMENT_CAPACITY }}
      AZURE_AI_EMBED_MODEL_NAME: ${{ vars.AZURE_AI_EMBED_MODEL_NAME }}
      AZURE_AI_EMBED_MODEL_FORMAT: ${{ vars.AZURE_AI_EMBED_MODEL_FORMAT }}
      AZURE_AI_EMBED_MODEL_VERSION: ${{ vars.AZURE_AI_EMBED_MODEL_VERSION }}
      AZURE_AI_EMBED_DIMENSIONS: ${{ vars.AZURE_AI_EMBED_DIMENSIONS }}
      AZURE_AI_SEARCH_INDEX_NAME: ${{ vars.AZURE_AI_SEARCH_INDEX_NAME }}
      AZURE_EXISTING_AIPROJECT_RESOURCE_ID: ${{ vars.AZURE_EXISTING_AIPROJECT_RESOURCE_ID }}
      AZURE_EXISTING_AIPROJECT_ENDPOINT: ${{ vars.AZURE_EXISTING_AIPROJECT_ENDPOINT }}
      AZURE_EXISTING_AGENT_ID: ${{ vars.AZURE_EXISTING_AGENT_ID }}
      ENABLE_AZURE_MONITOR_TRACING: ${{ vars.ENABLE_AZURE_MONITOR_TRACING }}
      AZURE_TRACING_GEN_AI_CONTENT_RECORDING_ENABLED: ${{ vars.AZURE_TRACING_GEN_AI_CONTENT_RECORDING_ENABLED }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Azure Developer CLI (AZD)
        uses: Azure/setup-azd@v2

      - name: Log in to Azure with federated credentials
        run: |
          azd auth login \
            --client-id "$AZURE_CLIENT_ID" \
            --federated-credential-provider "github" \
            --tenant-id "$AZURE_TENANT_ID"

      - name: Validate Environment Variables
        run: bash ./scripts/validate_env_vars.sh
        if: runner.os != 'Windows'
        
      - name: Validate Environment Variables (Windows)
        run: ./scripts/validate_env_vars.ps1
        if: runner.os == 'Windows'
        shell: pwsh

      - name: Provision and Deploy with AZD Up
        run: azd up --no-prompt
        env:
          AZD_INITIAL_ENVIRONMENT_CONFIG: ${{ secrets.AZD_INITIAL_ENVIRONMENT_CONFIG }}

      - name: Write Environment Variables
        run: bash ./scripts/write_env.sh
        if: runner.os != 'Windows'
        
      - name: Write Environment Variables (Windows)
        run: ./scripts/write_env.ps1
        if: runner.os == 'Windows'
        shell: pwsh
